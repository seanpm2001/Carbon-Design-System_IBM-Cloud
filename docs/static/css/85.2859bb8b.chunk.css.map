{"version":3,"file":"static/css/85.2859bb8b.chunk.css","mappings":"AAGA","sources":["webpack://new-pal/./src/components/OrderSummaryV2/_docs-styles.scss","webpack://new-pal/./node_modules/@carbon/themes/scss/_theme.scss","webpack://new-pal/./node_modules/@carbon/styles/scss/utilities/_custom-property.scss"],"sourcesContent":["@import \"@carbon/react/scss/themes\";\n@import \"@carbon/react/scss/theme\";\n\n.pal--order-summary-v2 .pal--submit-promo__container .cds--modal {\n  @include theme($g10, true);\n}\n","//\n// Copyright IBM Corp. 2018, 2023\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n@use 'sass:map';\n@use 'sass:meta';\n@use 'config';\n@use 'themes';\n\n/// Specify the fallback theme, used as a catch-all for tokens that you may not\n/// have defined in your custom theme\n$fallback: themes.$white !default;\n\n/// Specify the current theme. This can override existing tokens, or add new\n/// tokens. If you are adding new tokens, it's recommended that you set the\n/// fallback for your current theme\n$theme: () !default;\n$theme: map.merge($fallback, $theme);\n\n/// Local component tokens that can be updated with `@mixin add-component-tokens`.\n$-component-tokens: ();\n\n/// Include the CSS Custom Properties for the active theme or a given theme on\n/// a selector\n@mixin theme($active-theme: $theme, $component-tokens...) {\n  @each $token, $value in $active-theme {\n    @include -custom-property($token, $value);\n  }\n\n  @each $group in $component-tokens {\n    @each $token, $value in $group {\n      @include -custom-property($token, $value);\n    }\n  }\n\n  @each $token, $value in $-component-tokens {\n    @include -custom-property(\n      $token,\n      -resolve-token-value($active-theme, $value)\n    );\n  }\n}\n\n/// Retrieve the value for the given $token from the current $theme\n/// @param {String} $token\n@function get($token) {\n  @if map.has-key($theme, $token) {\n    @return map.get($theme, $token);\n  }\n  @error \"Unable to find token: #{$token} in current $theme\";\n}\n\n/// Compare two themes to see if the second theme is a superset of the first\n/// theme. In other words, this function will return true if every token in the\n/// first theme is available in the second theme and has the same value. The\n/// second theme is allowed to have additional values and it will still match.\n/// @param {Map} $a\n/// @param {Map} $b\n/// @returns {Boolean}\n@function matches($a, $b) {\n  @each $key, $value in $a {\n    @if map.has-key($b, $key) == false {\n      @return false;\n    }\n\n    @if map.get($b, $key) != $value {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n/// Add component tokens which will be included any time the theme mixin is\n/// called\n@mixin add-component-tokens($token-map) {\n  $-component-tokens: map.merge($-component-tokens, $token-map) !global;\n}\n\n/// Determine the value from a component token that matches the given theme.\n/// This is helpful when a component token may change depending on what theme the\n/// component is being rendered in.\n@function -resolve-token-value($active-theme: $theme, $token-value) {\n  @if meta.type-of($token-value) == map and map.has-key($token-value, values) {\n    $fallback: map.get($token-value, fallback);\n    $theme-values: map.get($token-value, values);\n\n    @each $theme-value in $theme-values {\n      $theme-to-match: map.get($theme-value, theme);\n      $value: map.get($theme-value, value);\n\n      @if matches($theme-to-match, $active-theme) {\n        @return $value;\n      }\n    }\n\n    @return $fallback;\n  }\n\n  @return $token-value;\n}\n\n/// @access private\n/// @group @carbon/themes\n@mixin -custom-property($name, $value) {\n  @if meta.type-of($value) == map {\n    @each $property, $property-value in $value {\n      // Only support one-level of depth for values that are maps. This is to\n      // avoid bringing properties like `breakpoints` on type tokens\n      @if type-of($property-value) != map {\n        @include -custom-property('#{$name}-#{$property}', $property-value);\n      }\n    }\n  } @else {\n    --#{config.$prefix}-#{$name}: #{$value};\n  }\n}\n","//\n// Copyright IBM Corp. 2018, 2023\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n@use '../config';\n\n// Some CSS Custom Property terminology\n// @see https://www.w3.org/TR/css-variables-1/\n//\n// <custom-property-name>:\n//   Any valid identifer that starts with two dashes (--)\n//\n// A declaration:\n//   CSS Custom Properties can be used as declarations in a CSS selector. They\n//   take on the form of:\n//\n//   <custom-property-name>: <declaration-value>;\n//\n// The var() notation:\n//   You can use a CSS Custom Property as a substitute for a value of another\n//   property using the var() function. This function has the following syntax:\n//\n//   var( <custom-property-name> [, <declarative-value> ]? )\n//\n//   This function takes in an optional fallback value if the CSS Custom\n//   Property has not been previously defined\n\n/// Get the <custom-property-name> for a given string\n/// @param {String} $name\n/// @returns {String}\n@function get-name($name) {\n  @return --#{config.$prefix}-#{$name};\n}\n\n/// Get the var() representation for a given token\n/// @param {String} $name\n/// @param {Any} $fallback\n/// @returns var()\n@function get-var($name, $fallback: false) {\n  @if $fallback {\n    @return var(--#{config.$prefix}-#{$name}, #{$fallback});\n  }\n  @return var(--#{config.$prefix}-#{$name});\n}\n\n/// Emit a declaration which sets the value of a CSS Custom Property using the\n/// $name as the <custom-property-name> and the $value as the\n/// <declaration-value>\n/// @param {String} $name\n/// @param {any} $value\n@mixin declaration($name, $value) {\n  #{get-name($name)}: #{$value};\n}\n"],"names":[],"sourceRoot":""}